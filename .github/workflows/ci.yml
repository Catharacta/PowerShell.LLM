name: PowerShell.LLM CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: windows-latest

    steps:
      # --- 1Ô∏è‚É£ „ÇΩ„Éº„Çπ„Ç≥„Éº„ÉâÂèñÂæó ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2Ô∏è‚É£ PowerShell „É¢„Ç∏„É•„Éº„É´„Ç≠„É£„ÉÉ„Ç∑„É• ---
      - name: Cache PowerShell Modules
        uses: actions/cache@v4
        with:
          path: ~/.local/share/powershell/Modules
          key: ${{ runner.os }}-psmodules-${{ hashFiles('**/PowerShell.LLM.psd1') }}
          restore-keys: |
            ${{ runner.os }}-psmodules-

      # --- 3Ô∏è‚É£ PowerShell 7.x „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó ---
      - name: Setup PowerShell
        uses: actions/setup-pwsh@v2
        with:
          pwsh-version: '7.4.1'

      # --- 4Ô∏è‚É£ ‰æùÂ≠ò„É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ ---
      - name: Install dependencies
        run: |
          pwsh -Command "Install-Module Pester -Force -Scope CurrentUser"
          pwsh -Command "Install-Module PSScriptAnalyzer -Force -Scope CurrentUser"

      # --- 5Ô∏è‚É£ „Ç≥„Éº„ÉâË¶èÁ¥Ñ„ÉÅ„Çß„ÉÉ„ÇØÔºàPSScriptAnalyzerÔºâ ---
      - name: Run Script Analyzer
        id: lint
        run: |
          $issues = Invoke-ScriptAnalyzer -Path ./src -Recurse -Severity Warning -ErrorAction SilentlyContinue
          if ($issues) {
            $issues | ConvertTo-Json -Depth 4 | Out-File script-analyzer-results.json
            Write-Host "‚ùå Lint warnings found"
          } else {
            Write-Host "‚úÖ No lint issues found"
          }

      # --- 5.5Ô∏è‚É£ FunctionsToExport Ê§úË®ºÔºàupdate-psd1.ps1 -CheckOnlyÔºâ ---
      - name: Validate FunctionsToExport consistency
        run: |
          if (-not (Test-Path ./artifacts)) { New-Item -ItemType Directory -Path ./artifacts | Out-Null }
          pwsh ./build/update-psd1.ps1 -CheckOnly 2>&1 | Tee-Object -FilePath ./artifacts/psd1-check.log
        continue-on-error: true

      # --- 6Ô∏è‚É£ „É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„Åø„ÉÜ„Çπ„Éà ---
      - name: Import Module
        run: |
          pwsh -Command "Import-Module ./src/PowerShell.LLM.psd1 -Force; Get-Module PowerShell.LLM"

      # --- 7Ô∏è‚É£ Pester „ÉÜ„Çπ„ÉàÂÆüË°å ---
      - name: Run Pester tests
        id: pester
        run: |
          $result = Invoke-Pester -Path './tests' -Output Detailed -PassThru
          $result.TestResult | ConvertTo-Json -Depth 5 | Out-File pester-results.json
          if (-not (Test-Path ./artifacts)) { New-Item -ItemType Directory -Path ./artifacts | Out-Null }
          $result | Export-Clixml ./artifacts/pester-results.xml
          if ($result.FailedCount -gt 0) { exit 1 }

      # --- 8Ô∏è‚É£ ÊàêÊûúÁâ©„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºà„ÉÜ„Çπ„ÉàÁµêÊûú & „Çª„ÉÉ„Ç∑„Éß„É≥„É≠„Ç∞ & psd1„ÉÅ„Çß„ÉÉ„ÇØ„É≠„Ç∞Ôºâ ---
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pester-results
          path: ./artifacts/pester-results.xml

      - name: Upload session logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: session-logs
          path: ./src/Data/cache/session.log

      - name: Upload psd1 check log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: psd1-check
          path: ./artifacts/psd1-check.log

      # --- 9Ô∏è‚É£ Mock Provider „ÉÜ„Çπ„Éà ---
      - name: Run Mock Provider Test
        run: |
          pwsh -Command "Import-Module ./src/PowerShell.LLM.psd1 -Force; Invoke-LLM -Prompt 'Hello from CI' -Provider 'mock' -Verbose"

      # --- üîü LintÁµêÊûú„Å®„ÉÜ„Çπ„ÉàË¶ÅÁ¥Ñ„ÇíPR„Å´„Ç≥„É°„É≥„Éà ---
      - name: Comment results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let pester = [];
            let lint = [];

            try { pester = JSON.parse(fs.readFileSync('pester-results.json', 'utf8')); } catch {}
            try { lint = JSON.parse(fs.readFileSync('script-analyzer-results.json', 'utf8')); } catch {}

            const passed = pester.filter(t => t.Outcome === 'Passed').length;
            const failed = pester.filter(t => t.Outcome === 'Failed').length;
            const skipped = pester.filter(t => t.Outcome === 'Skipped').length;
            const lintCount = lint.length || 0;

            const emoji = failed > 0 ? "‚ùå" : "‚úÖ";
            const lintEmoji = lintCount > 0 ? "‚ö†Ô∏è" : "üßπ";

            const summary = `
            ${emoji} **Pester Test Summary**
            | Status | Passed | Failed | Skipped |
            |:------:|:------:|:------:|:--------:|
            | ${emoji} | ${passed} | ${failed} | ${skipped} |

            ${lintEmoji} **Script Analyzer Results**
            | Type | Count |
            |:----:|:------:|
            | Warnings | ${lintCount} |
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
